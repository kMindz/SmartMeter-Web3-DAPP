/**
 * web3JS Sample DAPP by http://acloudfan.com
 * Version: 102     May 20th, 2017
 * 
 * Application developed as part of the course on Ethereum Blockchain
 * All Rights Reserved - Please do not share. 
 * Updated versions of the code is available on the link below:
 * APP will be updated time to time so please check back
 * 
 * http://www.acloudfan.com
 * 
 * This DAPP is available on the following link .... to use it you would need MetaMask
 * http://TheDapps.com
 * 
 * Geth
 * =====
 * Application developed against Geth/ROPSTEN
 * 
 * TestRPC
 * =======
 * Some API NOT Supported in TestRPC
 * Etherscan.io links will not be supported for TestRPC
 * 
 * META MASK
 * =========
 * MetaMask will work - except some for some functions coded SYNCHRONOUSLY
 * You may change it to work with MetaMask
 * 
 */


// The sample code was compiled in Remix
// Bytecode / Interface generated by Remix was pasted here
var contract_abidefinition = '[{"constant":true,"inputs":[],"name":"getBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getLast4Transaction","outputs":[{"name":"amount","type":"uint256"},{"name":"name","type":"string"},{"name":"when","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getLast1Transaction","outputs":[{"name":"amount","type":"uint256"},{"name":"name","type":"string"},{"name":"when","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getLast2Transaction","outputs":[{"name":"amount","type":"uint256"},{"name":"name","type":"string"},{"name":"when","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getLast3Transaction","outputs":[{"name":"amount","type":"uint256"},{"name":"name","type":"string"},{"name":"when","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"amt","type":"uint256"},{"name":"name","type":"string"}],"name":"recharge","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getLastTransaction","outputs":[{"name":"amount","type":"uint256"},{"name":"name","type":"string"},{"name":"when","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"balance","type":"uint256"}],"name":"EventRechargeDone","type":"event"}]';
var contract_bytecode = '0x606060405234156200001057600080fd5b6000808190555060006001819055506200007560016040805190810160405280600781526020017f4d75737461666100000000000000000000000000000000000000000000000000815250620001d36401000000000262000830176401000000009004565b620000cb60016040805190810160405280600681526020017f48757361696e0000000000000000000000000000000000000000000000000000815250620001d36401000000000262000830176401000000009004565b6200012160016040805190810160405280600681526020017f416b687461720000000000000000000000000000000000000000000000000000815250620001d36401000000000262000830176401000000009004565b6200017760016040805190810160405280600481526020017f4172696600000000000000000000000000000000000000000000000000000000815250620001d36401000000000262000830176401000000009004565b620001cd60016040805190810160405280600581526020017f46617a616c000000000000000000000000000000000000000000000000000000815250620001d36401000000000262000830176401000000009004565b62000396565b81600080828254019250508190555081600260006001548152602001908152602001600020600001819055508060026000600154815260200190815260200160002060010190805190602001906200022d929190620002e7565b503360026000600154815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600260006001548152602001908152602001600020600301819055506001600081548092919060010191905055506000547f505087f5c90dd1e66c43ece502a9e408fc40efee451b05b57babb377c6cc6dc860405160405180910390a25050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200032a57805160ff19168380011785556200035b565b828001600101855582156200035b579182015b828111156200035a5782518255916020019190600101906200033d565b5b5090506200036a91906200036e565b5090565b6200039391905b808211156200038f57600081600090555060010162000375565b5090565b90565b610b2780620003a66000396000f300606060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806312065fe01461008857806325acce0e146100b15780634d33c0ad1461014d57806393fe9231146101e95780639ed0918f14610285578063e8f4d59014610321578063f7e03fd814610387575b600080fd5b341561009357600080fd5b61009b610423565b6040518082815260200191505060405180910390f35b34156100bc57600080fd5b6100c461042c565b6040518084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156101105780820151818401526020810190506100f5565b50505050905090810190601f16801561013d5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b341561015857600080fd5b61016061052d565b6040518084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156101ac578082015181840152602081019050610191565b50505050905090810190601f1680156101d95780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34156101f457600080fd5b6101fc61062e565b6040518084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561024857808201518184015260208101905061022d565b50505050905090810190601f1680156102755780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b341561029057600080fd5b61029861072f565b6040518084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156102e45780820151818401526020810190506102c9565b50505050905090810190601f1680156103115780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b341561032c57600080fd5b610385600480803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610830565b005b341561039257600080fd5b61039a610942565b6040518084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156103e65780820151818401526020810190506103cb565b50505050905090810190601f1680156104135780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b60008054905090565b6000610436610a42565b60008060056001540390506002600082815260200190815260200160002060000154600260008381526020019081526020016000206001016002600084815260200190815260200160002060030154818054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561051a5780601f106104ef5761010080835404028352916020019161051a565b820191906000526020600020905b8154815290600101906020018083116104fd57829003601f168201915b5050505050915093509350935050909192565b6000610537610a42565b60008060026001540390506002600082815260200190815260200160002060000154600260008381526020019081526020016000206001016002600084815260200190815260200160002060030154818054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561061b5780601f106105f05761010080835404028352916020019161061b565b820191906000526020600020905b8154815290600101906020018083116105fe57829003601f168201915b5050505050915093509350935050909192565b6000610638610a42565b60008060036001540390506002600082815260200190815260200160002060000154600260008381526020019081526020016000206001016002600084815260200190815260200160002060030154818054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561071c5780601f106106f15761010080835404028352916020019161071c565b820191906000526020600020905b8154815290600101906020018083116106ff57829003601f168201915b5050505050915093509350935050909192565b6000610739610a42565b60008060046001540390506002600082815260200190815260200160002060000154600260008381526020019081526020016000206001016002600084815260200190815260200160002060030154818054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561081d5780601f106107f25761010080835404028352916020019161081d565b820191906000526020600020905b81548152906001019060200180831161080057829003601f168201915b5050505050915093509350935050909192565b8160008082825401925050819055508160026000600154815260200190815260200160002060000181905550806002600060015481526020019081526020016000206001019080519060200190610888929190610a56565b503360026000600154815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600260006001548152602001908152602001600020600301819055506001600081548092919060010191905055506000547f505087f5c90dd1e66c43ece502a9e408fc40efee451b05b57babb377c6cc6dc860405160405180910390a25050565b600061094c610a42565b600080600180540390506002600082815260200190815260200160002060000154600260008381526020019081526020016000206001016002600084815260200190815260200160002060030154818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a2f5780601f10610a0457610100808354040283529160200191610a2f565b820191906000526020600020905b815481529060010190602001808311610a1257829003601f168201915b5050505050915093509350935050909192565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610a9757805160ff1916838001178555610ac5565b82800160010185558215610ac5579182015b82811115610ac4578251825591602001919060010190610aa9565b5b509050610ad29190610ad6565b5090565b610af891905b80821115610af4576000816000905550600101610adc565b5090565b905600a165627a7a72305820a2ed8647556d6ec0706a3ea06d5dfa60bcc21a420da66566d65131508ffa60e00029';
var contract_address = '0x074085ee3dc0c94496beefd7a2c5394955ff3df1';

var autoRetrieveFlag = true;

// Holds the accounts
var accounts;
var gauge;

// Holds the filter objects
var filterWatch;
var filterEventCounter;

// Holds the contract event object
var contractEvent;
var contractEventCounter = 0;

// Maintains the info on node type
var nodeType = 'geth';

/**
 * Listener for load
 */
window.addEventListener('load', function () {

    // Checking if Web3 has been injected by the browser (Mist/MetaMask)
    if (typeof web3 !== 'undefined') {
        // Use Mist/MetaMask's provider
        window.web3 = new Web3(web3.currentProvider);
    } else {

        document.getElementById('metamask').innerHTML = 'This Demo needs, <a href="https://metamask.io/">Meta Mask installed...</a>';
        console.log('Injected web3 Not Found!!!')
        // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)
        window.web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));

        var provider = document.getElementById('provider_url').value;
        window.web3 = new Web3(new Web3.providers.HttpProvider(provider));
    }

    var opts = {
        angle: 0.1, // The span of the gauge arc
        lineWidth: 0.3, // The line thickness
        radiusScale: 1, // Relative radius
        pointer: {
            length: 0.58, // // Relative to gauge radius
            strokeWidth: 0.066, // The thickness
            color: '#757575' // Fill color
        },
        limitMax: false,     // If false, max value increases automatically if value > maxValue
        limitMin: false,     // If true, the min value of the gauge will be fixed
        colorStart: '#6F6EA0',   // Colors
        colorStop: '#9E9E9E',    // just experiment with them
        strokeColor: '#EEEEEE',  // to see which ones work best for you
        generateGradient: true,
        highDpiSupport: true,     // High resolution support

    };

    var target = document.getElementById('g1'); // your canvas element
    gauge = new Gauge(target).setOptions(opts); // create sexy gauge!
    gauge.maxValue = 300; // set max gauge value
    gauge.setMinValue(0);  // Prefer setter over gauge.minValue = 0
    gauge.animationSpeed = 1000; // set animation speed (32 is default value)
    gauge.set(15); // set actual value
    gauge.setTextField(document.getElementById('preview-text'));

    setInterval(function () {
        gauge.set(getRandomInt(0, 300));
    }, 2500);

    // Now you can start your app & access web3 freely:
    //startApp();

    doCalcContractFunctionCall();
})

/** Random integer  */
function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

/**
 * This method gets invoked when document is ready
 */
function startApp() {

    // If the app is reconnected we should reset the watch
    doFilterStopWatching();
    doContractEventWatchStop();

    // Set the connect status on the app
    if (web3 && web3.isConnected()) {
        setData('connect_status', 'Connected', false);

        // Gets the version data and populates the result UI
        setWeb3Version();

        if (autoRetrieveFlag) doGetAccounts();

    } else {
        setData('connect_status', 'Not Connected', true);
    }

    // no action to be taken if this flag is OFF  
    // during development for convinience you may set autoRetrieveFlag=true
    if (!autoRetrieveFlag) return;



    // doConnect();
    // // doGetAccounts();
    doGetNodeStatus();

    // Compilation is available only for TestRPC
    // Geth 1.6 and above does not support compilation
    // MetaMask does not support compilation
    doGetCompilers();
}

/**
 * This method is called for connecting to the node
 * The Provider URL is provided in a Document element with the 
 * id = provider_url
 */


function doConnect() {

    // Get the provider URL
    var provider = document.getElementById('provider_url').value;
    var provider = document.getElementById('provider_url').value;
    window.web3 = new Web3(new Web3.providers.HttpProvider(provider));
    startApp();

}

/**
 * Get the version information for Web3
 */

function setWeb3Version() {

    var versionJson = {};

    // Asynchronous version
    web3.version.getNode(function (error, result) {
        if (error) setData('version_information', error, true);
        else {
            setData('version_information', result, false);

            if (result.toLowerCase().includes('metamask')) {
                nodeType = 'metamask';
            } else if (result.toLowerCase().includes('testrpc')) {
                nodeType = 'testrpc';
            } else {
                nodeType = 'geth';
            }


            // set up UI elements based on the node type
            setUIBasedOnNodeType();
        }
    });
}



/**
 * Uses the web3.net status to check if the client is listening and peer count
 */

function doGetNodeStatus() {

    // Asynch version
    web3.net.getListening(function (error, result) {
        if (error) setData('get_peer_count', error, true);
        else {
            // Since connected lets get the count
            web3.net.getPeerCount(function (error, result) {
                if (error) {
                    setData('get_peer_count', error, true);
                } else {
                    setData('get_peer_count', 'Peer Count: ' + result, (result == 0));
                }
            });
        }
    });
}

/**
 * Gets the accounts under the node
 * 
 */

function doGetAccounts() {
    // This is the synch call for getting the accounts
    // var accounts = web3.eth.accounts

    // Asynchronous call to get the accounts
    // result = [Array of accounts]
    // MetaMask returns 1 account in the array - that is the currently selected account
    web3.eth.getAccounts(function (error, result) {
        if (error) {
            setData('accounts_count', error, true);
        } else {
            accounts = result;
            setData('accounts_count', result.length, false);
            // You need to have at least 1 account to proceed
            if (result.length == 0) {
                if (nodeType == 'metamask') {
                    alert('Unlock MetaMask *and* click \'Get Accounts\'');
                }
                return;
            }

            // Remove the list items that may already be there
            removeAllChildItems('accounts_list');
            // Add the accounts as list items
            for (var i = 0; i < result.length; i++) {
                addAccountsToList('accounts_list', i, result[i])
            }

            var coinbase = web3.eth.coinbase;
            // trim it so as to fit in the window/UI
            if (coinbase) coinbase = coinbase.substring(0, 25) + '...'
            setData('coinbase', coinbase, false);
            // set the default accounts
            var defaultAccount = web3.eth.defaultAccount;
            if (!defaultAccount) {
                web3.eth.defaultAccount = result[0];
                defaultAccount = '[Undef]' + result[0];
            }

            defaultAccount = defaultAccount.substring(0, 25) + '...';
            setData('defaultAccount', defaultAccount, false);
        }
        // Get the balances of all accounts doGetBalances
        doGetBalances(accounts)

        // This populates the SELECT boxes with the accounts
        addAccountsToSelects(accounts);
    });
}

/**
 * Get the balances of all accounts.
 */
function doGetBalances(accounts) {

    // Remove the balances if they already exist
    removeAllChildItems('account_balances_list');

    // Add the balances as the list items
    for (var i = 0; i < accounts.length; i++) {

        // var bal = web3.eth.getBalance(accounts[i]);
        web3.eth.getBalance(accounts[i], web3.eth.defaultBlock, function (error, result) {
            // Convert the balance to ethers
            var bal = web3.fromWei(result, 'ether').toFixed(2);
            addAccountBalancesToList('account_balances_list', i, bal);
        });
    }
}

/**
 * This gets invoked for sending the transaction
 */

function doSendTransaction() {

    var transactionObject = createTransactionObjectJson();

    web3.eth.sendTransaction(transactionObject, function (error, result) {

        if (error) {
            setData('send_transaction_error_or_result', error, true);
        } else {
            setData('send_transaction_error_or_result', result, false);
            // set the link to ether scan
            var etherscanLinkA = document.getElementById('etherscan_io_tx_link');
            etherscanLinkA.href = createEtherscanIoUrl('tx', result);
            etherscanLinkA.innerHTML = 'etherscan.io'
            //console.log(etherscanLinkA)
        }
    });
}

/**
 * Unlocks the account
 * UNLOCK/LOCK not supported in TestRPC
 * Ignored in MetaMask
 */

function doUnlockAccount() {

    setData('lock_unlock_result', '...', true);
    var account = document.getElementById('select_to_unlock_account').value;
    var password = document.getElementById('unlock_account_password').value;

    // synchronous flavor
    // web3.personal.unlockAccount(account, password, duration)
    // web3.personal.unlockAccount(account, password)


    web3.personal.unlockAccount(account, password, function (error, result) {

        // console.log(error,result)
        if (error) {
            setData('lock_unlock_result', error, true);
        } else {
            // Result = True if unlocked, else false
            var str = account.substring(0, 20) + '...Unlocked';
            if (result) {
                setData('lock_unlock_result', str, false);
            } else {
                // This does not get called - since and error is returned for incorrect password :-)
                str = 'Incorrect Password???';
                setData('lock_unlock_result', str, true);
            }


        }
    });
}

/**
 * Lock the account
 */
function doLockAccount() {



    setData('lock_unlock_result', '...', true);
    var account = document.getElementById('select_to_unlock_account').value;
    //Synchronous flavor
    //web3.personal.lockAccount(account)

    web3.personal.lockAccount(account, function (error, result) {

        console.log(error, result)
        if (error) {
            setData('lock_unlock_result', error, true);
        } else {
            var str = account.substring(0, 20) + '...Locked';
            setData('lock_unlock_result', str, false);
        }
    });
}

/**
 * Gets the list of compilers
 */
function doGetCompilers() {



    web3.eth.getCompilers(function (error, result) {
        if (error) {
            setData('list_of_compilers', error, true);
        } else {
            // result has an array of compilers
            if (result.length == 0)
                setData('list_of_compilers', 'No Compilers!!!', true);
            else
                setData('list_of_compilers', result, false);
        }
    });
}

/**
 * Starting geth 1.6 - Solidity compilation is not allowed from
 * web3 JSON/RPC
 */

function doCompileSolidityContract() {


    var source = document.getElementById('sourcecode').value;

    console.log(flattenSource(source));

    web3.eth.compile.solidity(source, function (error, result) {

        if (error) {
            console.log(error);
            setData('compilation_result', error, true);
        } else {
            // This is an issue seen only on windows - solc compile binary - ignore
            result = compileResultWindowsHack(result);
            console.log('Compilation Result=', JSON.stringify(result));
            var contract_1 = '';
            var code_1 = '';
            var abi_1 = '';
            for (var prop in result) {
                contract_1 = prop;
                code_1 = result[prop].code;
                if (!code_1) {
                    // Test RPC returns code in result.code
                    code_1 = result.code;
                }
                if (result[prop].info) {
                    abi_1 = result[prop].info.abiDefinition;
                } else {
                    // Test RPC does not have the contracts :) in result
                    abi_1 = result.info.abiDefinition;
                }
                break;
            }
            // Populate the UI elements
            setData('compilation_result', 'Contract#1: ' + contract_1, false);
            document.getElementById('compiled_bytecode').value = code_1;
            document.getElementById('compiled_abidefinition').value = JSON.stringify(abi_1);

        }
    });
}




/**
 * Deploys the contract - ASYNCH
 */

function doDeployContract() {
    // Reset the deployment results UI
    resetDeploymentResultUI();

    var abiDefinitionString = document.getElementById('compiled_abidefinition').value;
    var abiDefinition = JSON.parse(abiDefinitionString);

    var bytecode = document.getElementById('compiled_bytecode').value;

    // 1. Create the contract object
    var contract = web3.eth.contract(abiDefinition);

    // Get the estimated gas
    var gas = document.getElementById('deployment_estimatedgas').value;

    // 2. Create the params for deployment - all other params are optional, uses default
    var params = {
        from: web3.eth.coinbase,
        data: bytecode,
        gas: gas
    }

    // 3. This is where the contract gets deployed
    // Callback method gets called *2* 
    // First time : Result = Txn Hash
    // Second time: Result = Contract Address
    var constructor_param = 10;

    contract.new(constructor_param, params, function (error, result) {

        if (error) {
            setData('contracttransactionhash', 'Deployment Failed: ' + error, true);
        } else {
            console.log('RECV:', result)
            if (result.address) {
                document.getElementById('contractaddress').value = result.address;
                setEtherscanIoLink('contractaddress_link', 'address', result.address);
            } else {
                // gets set in the first call
                setData('contracttransactionhash', result.transactionHash, false);
                setEtherscanIoLink('contracttransactionhash_link', 'tx', result.transactionHash);
            }
        }
    });
}

/**
 * Deploys the contract - Synchronous
 * Function not in use from UI. Created to show how once can use the synch API
 * contract.new
 */

function doDeployContractSynchronous() {

    var abiDefinitionString = document.getElementById('compiled_abidefinition').value;
    var abiDefinition = JSON.parse(abiDefinitionString);

    var bytecode = document.getElementById('compiled_bytecode').value;

    // 1. Create the contract object
    var contract = web3.eth.contract(abiDefinition);

    // Get the estimated gas
    var gas = document.getElementById('deployment_estimatedgas').value;

    // 2. Create the params for deployment - all other params are optional, uses default
    var params = {
        from: web3.eth.coinbase,
        data: bytecode,
        gas: gas
    }

    var contractData = contract.new.getData(10, { 'data': bytecode });
    console.log('Contract Data=', contractData);
    // call send transaction and then call getTransactionReceipt
    params.data = contractData
    var transactionHash = web3.eth.sendTransaction(params)
    console.log('TxnHash=', transactionHash);
    web3.eth.getTransactionReceipt(transactionHash, function (error, result) {
        if (error) console.log('SENDTran Error=', error)
        else if (error) console.log('SENDTran Hash=', result);
    });

    return
}

// Utility method for creating the contract instance
function createContractInstance(addr) {
    var abiDefinitionString = contract_abidefinition;
    var abiDefinition = JSON.parse(abiDefinitionString);

    // Instance uses the definition to create the function

    var contract = web3.eth.contract(abiDefinition);

    // THIS IS AN EXAMPLE - How to create a deploy using the contract
    // var instance = contract.new(constructor_params, {from:coinbase, gas:10000})
    // Use the next for manual deployment using the data generated
    // var contractData = contract.new.getData(constructor_params, {from:coinbase, gas:10000});

    var address = contract_address;

    if (!address) address = document.getElementById('contractaddress').value;

    // Instance needs the address

    var instance = contract.at(address);

    return instance;
}


/**
 * This invokes the contract function
 * locally on the node with no state change propagation
 */
function doContractFunctionCall() {
    // This leads to the invocation of the method locally
    var instance = createContractInstance();

    var funcName = document.getElementById('contract_select_function').value;

    if (funcName === 'setNum') {
        var parameterValue = document.getElementById('setnum_parameter').value;

        // MetaMask does not allow synchronous call to 'call' for non-constant function
        // Change this to asynchronous :)
        var value = instance.setNum.call(parameterValue);

        setExecuteResultUI('Call', funcName, parameterValue, value, '', false);
    } else {

        instance.getNum.call({}, web3.eth.defaultBlock, function (error, result) {
            setExecuteResultUI('Call', funcName, '', result, '', false);
        });


    }
}


/**
 * This invokes the contract function
 * locally on the node with no state change propagation
 */
function doCalcContractFunctionCall() {
    // This leads to the invocation of the method locally
    var instance = createContractInstance();
    var funcName = 'getBalance';

    instance.getBalance.call({}, web3.eth.defaultBlock, function (error, result) {
        setCalcExecuteResultUI('Call', funcName, '', result, '', false);
    });

    instance.getLastTransaction.call({}, web3.eth.defaultBlock, function (error, result) {
        if(error) console.log(error);
        else
            setTransactionExecuteResultUI('0', result);
    });

    instance.getLast1Transaction.call({}, web3.eth.defaultBlock, function (error, result) {
        if(error) console.log(error);
        else
            setTransactionExecuteResultUI('1', result);
    });

    instance.getLast2Transaction.call({}, web3.eth.defaultBlock, function (error, result) {
        if(error) console.log(error);
        else
            setTransactionExecuteResultUI('2', result);
    });

    instance.getLast3Transaction.call({}, web3.eth.defaultBlock, function (error, result) {
        if(error) console.log(error);
        else
            setTransactionExecuteResultUI('3', result);
    });
    
    instance.getLast4Transaction.call({}, web3.eth.defaultBlock, function (error, result) {
        if(error) console.log(error);
        else
            setTransactionExecuteResultUI('4', result);
    });

    /*
        // Create the transaction object
        var txnObject = {
            from: web3.eth.coinbase
        }
    
            // getNum with sendTransaction
            instance.getNum.sendTransaction(txnObject, function (error, result) {
    
                //alert(result);
                console.log('RECVED>>', error, result);
                if (error) {
                    setCalcExecuteResultUI('Send Transaction:   ', funcName, 'asdasd', error, 'asdsad', true);
                } else {
                    setCalcExecuteResultUI('Send Transaction:   ', funcName, 'asdsad', result, result, false);
                }
            });
    */

}



/**
 * This invokes the contract function
 * locally on the node with no state change propagation
 */
function doSendCalcTransaction(amount) {
    // This leads to the invocation of the method locally
    var instance = createContractInstance();
    var funcName = 'recharge';

    document.getElementById('invoke_return_value').innerHTML = 'Please wait...';

    // Create the transaction object
    var txnObject = {
        from: web3.eth.coinbase
    }

    var donar = document.getElementById('donar').value;
    if(donar=='') donar = 'Humble Donation';

    // getNum with sendTransaction
    instance.recharge.sendTransaction(amount, donar, txnObject, function (error, result) {

        //alert(result);
        console.log('RECVED>>', error, result);
        if (error) {
            setCalcExecuteResultUI('Send Transaction:   ', funcName, '', error, '', true);
        } else {
            setCalcExecuteResultUI('Send Transaction:   ', funcName, '', '<img src="./images/progress.gif">Submitted: pls wait</img>', result, false);
        }
    });

    var myEvent = instance.EventRechargeDone();
    myEvent.watch(function(error, result){
        doCalcContractFunctionCall();
    });

    // window.setTimeout(function () {
    //     doCalcContractFunctionCall();
    // }, 30000);
}

/**
 * Sets the Result UI components for the Execute call
 */
function setCalcExecuteResultUI(callType, functionName, parameter, return_value, txHash, error) {

    var detail = callType + ':' + functionName + '(' + parameter + ')';
    if (error) detail += ' FAILED ' + return_value;
    else detail += 'Successful';

    //setData('invoke_details',detail,(error));
    setData('invoke_return_value', return_value, (error));
    var txHash_display = txHash;
    if (txHash) {
        txHash_display = 'Transaction Hash: ' + txHash
    }
    setData('invoke_contracttransactionhash', txHash_display, false);
    setEtherscanIoLink('invoke_contracttransactionhash_link', 'tx', txHash);
}

function setTransactionExecuteResultUI(id, result) {
    
    var d = new Date(result[2].toNumber()*1000);
    setTableData('name'+id, result[1]);
    setTableData('amt'+id, result[0]);
    setTableData('time'+id, d.toLocaleString() );
}

function setTableData(docElementId, html) {
    document.getElementById(docElementId).innerHTML = html;
}


/**
 * send Transaction costs Gas. State changes are recorded on the chain.
 */
function doContractSendCall() {
    // creating the cntract instance
    var instance = createContractInstance();
    // read the ui elements
    var estimatedGas = document.getElementById('contract_execute_estimatedgas').value;
    var parameterValue = document.getElementById('setnum_parameter').value;
    var funcName = document.getElementById('contract_select_function').value;
    //value NOT used as the contract function needs to be modified with "payable" modifier
    //var value = document.getElementById('invocation_send_value_in_ether').value;
    //value = web3.toWei(value,'ether');

    // Create the transaction object
    var txnObject = {
        from: web3.eth.coinbase,
        gas: estimatedGas
    }

    if (funcName === 'setNum') {
        // setNum with sendTransaction
        instance.setNum.sendTransaction(parameterValue, txnObject, function (error, result) {

            console.log('RECVED>>', error, result);
            if (error) {
                setExecuteResultUI('Send Transaction:   ', funcName, '', error, '', true);
            } else {
                setExecuteResultUI('Send Transaction:   ', funcName, parameterValue, result, result, false);
            }
        });
    } else {
        // getNum with sendTransaction
        instance.getNum.sendTransaction(txnObject, function (error, result) {

            console.log('RECVED>>', error, result);
            if (error) {
                setExecuteResultUI('Send Transaction:   ', funcName, '', error, '', true);
            } else {
                setExecuteResultUI('Send Transaction:   ', funcName, '', result, result, false);
            }
        });
    }
}

/**
 * Starts the filter watch for events with options specified by the user
 */


function doFilterWatchStart() {
    //1. Stop the wtach if its already ON
    doFilterStopWatching();
    //2. Reset the UI
    setData('watch_event_count', '0', false);

    //3. Create the filter option
    var options = generateFilterOptions();
    console.log('FILTER Watch Options:', JSON.stringify(options));

    //4. Set the applied watch filter UI Input box
    document.getElementById('applied_watch_filter').value = JSON.stringify(options);

    //5. Create instance of the filter
    filterWatch = web3.eth.filter(options);

    //6. Now start watching
    filterWatch.watch(function (error, result) {
        if (error) {
            console.error('Filter Watch Error: ', error);
        } else {
            filterEventCounter++;
            // Update the UI for the counter
            setData('watch_event_count', filterEventCounter, false);

            // Updates the UI with received event
            addEventListItem('watch_events_list', result, 5);
        }
    });
}

/**
 * Stop watching for events
 */

function doFilterStopWatching() {

    // 1. Stop watching if watching iactive
    if (filterWatch) {
        filterWatch.stopWatching();
        filterWatch = undefined;
    }
    // 2. Reset the UI
    setData('watch_event_count', 'Not Watching', true);
    document.getElementById('applied_watch_filter').value = '';

    // 3. Remove all of the past events from the list
    clearList('watch_events_list');

    // 4. reset the counter
    filterEventCounter = 0;
}

/**
 * Get the logs for the specified filter
 * Testnet sample contract address: 
 */

function doFilterGetLogs() {

    // 1. Clear the list
    clearList('get_logs_list');

    // 2. Create the filter option
    var options = generateFilterOptions();
    console.log('FILTER Get Options:', JSON.stringify(options));

    // 3. Set the applied watch filter UI Input box
    document.getElementById('applied_log_filter').value = JSON.stringify(options);

    // 4. Create the instance of the filter
    var filterGet = web3.eth.filter(options);

    // 5. Invoke get on filter with the callback function
    filterGet.get(function (error, result) {
        if (error) {
            console.log('GET Error:', error);
            setData('get_log_count', error, true);
        } else {
            // result = array of events
            // Update UI with the data received as an array of events
            setData('get_log_count', result.length, false);
            for (var i = 0; i < result.length; i++) {
                //console.log("Event.watch="+JSON.stringify(result[i]))
                addEventListItem('get_logs_list', result[i], 50);
            }
        }
    });
}

/**
 * To start the event watching using the contract object
 */

function doContractEventWatchStart() {

    if (contractEvent) {
        doContractEventWatchStop();
    }

    // Reset the UI
    setData('watch_contract_instance_event_count', '0', false);

    contractEvent = createContractEventInstance();

    contractEvent.watch(function (error, result) {
        if (error) {
            console.error('Contract Event Error');
        } else {

            //    console.log("Event.watch="+JSON.stringify(result))
            // increment the count watch_instance_event_count
            contractEventCounter++;
            setData('watch_contract_instance_event_count', contractEventCounter, false);

            addEventListItem('watch_contract_events_list', result, 5);
        }
    });
}


/**
 * To stop the event watching using the contract object
 */

function doContractEventWatchStop() {

    if (contractEvent) {
        contractEvent.stopWatching();
        contractEvent = undefined;
    }
    contractEventCounter = 0;
    clearList('watch_contract_events_list');
    setData('watch_contract_instance_event_count', '---', true);
}

/**
 * Gets the logs for the specific contract instance
 */

function doContractEventGet() {

    clearList('get_contract_instance_logs_list');
    setData('get_contract_instance_log_count', '---', true);
    var event = createContractEventInstance();
    event.get(function (error, result) {
        if (error) {
            setData('get_contract_instance_log_count', error, true);
        } else {
            setData('get_contract_instance_log_count', result.length, false);
            for (var i = 0; i < result.length; i++) {
                addEventListItem('get_contract_instance_logs_list', result[i], 50);
            }
        }
    });
}

/**
 * Utility method for creating an instance of the event
 */
function createContractEventInstance() {
    var contractAddress = document.getElementById('contract_instance_address').value

    var contractInstance = createContractInstance(contractAddress);

    // geth the indexed data values JSON
    var indexedEventValues = document.getElementById('indexed_event_values').value
    indexedEventValues = JSON.parse(indexedEventValues)

    var additionalFilterOptions = document.getElementById('additional_filter_event_values').value;
    additionalFilterOptions = JSON.parse(additionalFilterOptions);

    return contractInstance.NumberSetEvent(indexedEventValues, additionalFilterOptions);
}